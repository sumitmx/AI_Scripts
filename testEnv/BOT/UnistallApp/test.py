import subprocess
import tempfile
from pathlib import Path
from typing import Dict, List, Literal, Optional, cast
from pydantic import BaseModel
from cw_rpa import Logger, Input


class UninstallerScript(BaseModel):
    """Configuration for a malware uninstaller PowerShell script.
    
    Attributes:
        name: Human-readable name of the malware being uninstalled
        log_path: Path where the PowerShell script will write its log output
        powershell_code: The PowerShell script content to execute
    """
    name: str
    log_path: Path
    powershell_code: str


class ExecutionResult(BaseModel):
    """Result of executing a single PowerShell uninstaller script.
    
    Attributes:
        script_name: Name of the script that was executed
        success: Whether the script executed successfully (exit code 0)
        log_content: Contents of the log file generated by the script
        error_message: Error message if the script failed, None if successful
    """
    script_name: str
    success: bool
    log_content: str
    error_message: Optional[str] = None


class BulkUninstallerResult(BaseModel):
    """Result of running multiple uninstaller scripts.
    
    Attributes:
        overall_status: Success if all succeeded, Partial Success if some succeeded, Failed if none succeeded
        total_scripts: Total number of scripts that were executed
        successful_scripts: Number of scripts that completed successfully
        failed_scripts: Number of scripts that failed to execute
        results: Individual results for each script that was executed
    """
    overall_status: Literal["Success", "Partial Success", "Failed"]
    total_scripts: int
    successful_scripts: int
    failed_scripts: int
    results: List[ExecutionResult]


UNINSTALLER_SCRIPTS: Dict[str, UninstallerScript] = {
    "PCAppStore": UninstallerScript(
        name="PCAppStore",
        log_path=Path("C:/Temp/pcappstore_cleanup.txt"),
        powershell_code=r"""
$UserProfiles = Get-ChildItem "C:\Users\" -Directory

foreach ($User in $UserProfiles) {
    $TargetFolder = "$($User.FullName)\pcappstore"
    $DesktopShortcut = "$($User.FullName)\Desktop\PC App Store.lnk"

    if (Test-Path $TargetFolder) {
        Write-Host "Attempting to delete: $TargetFolder"
        try {
            takeown /F $TargetFolder /R /D Y
            icacls $TargetFolder /grant Administrators:F /T /C
            $Processes = Get-Process | Where-Object { 
            $_.ProcessName -match "pcappstore|watchdog" 
        }

            foreach ($Process in $Processes) {
                Write-Host "Terminating process: $($Process.ProcessName)"
                Stop-Process -Id $Process.Id -Force -ErrorAction SilentlyContinue
            }

            Start-Sleep -Seconds 3
            Remove-Item -Path $TargetFolder -Recurse -Force -Confirm:$false -ErrorAction Stop
            Write-Host "Successfully removed: $TargetFolder"
        } catch {
            Write-Host "Final attempt failed: $TargetFolder could not be removed."
        }
    } else {
        Write-Host "Folder not found for user: $($User.FullName)"
    }

    if (Test-Path $DesktopShortcut) {
        Write-Host "Deleting desktop shortcut: $DesktopShortcut"
        Remove-Item -Path $DesktopShortcut -Force -ErrorAction SilentlyContinue
    }
}

Write-Host "Scanning registry for PCAppStore uninstall keys..."
$UserSIDs = Get-ChildItem "Registry::HKEY_USERS" | Select-Object -ExpandProperty PSChildName

foreach ($SID in $UserSIDs) {
    $UninstallKey = "Registry::HKEY_USERS\$SID\Software\Microsoft\Windows\CurrentVersion\Uninstall\PCAppStore"

    if (Test-Path $UninstallKey) {
        Write-Host "Found uninstall key for PCAppStore under: $UninstallKey"
        try {
            Remove-Item -Path $UninstallKey -Recurse -Force -ErrorAction Stop
            Write-Host "Successfully deleted uninstall key: $UninstallKey"
        } catch {
            Write-Host "Failed to remove uninstall key: $UninstallKey"
        }
    }
}

Write-Host "Removing startup entries for pcappstore, pcappstoreupdater, and watchdog from all users..."
foreach ($SID in $UserSIDs) {
    $StartupPath = "Registry::HKEY_USERS\$SID\Software\Microsoft\Windows\CurrentVersion\Run"
    foreach ($Key in @("pcappstore", "pcappstoreupdater", "watchdog")) {
        if (Get-ItemProperty -Path $StartupPath -Name $Key -ErrorAction SilentlyContinue) {
            Write-Host "Removing startup entry: $Key from $StartupPath"
            Remove-ItemProperty -Path $StartupPath -Name $Key -Force -ErrorAction SilentlyContinue
        }
    }
}

Write-Host "Cleanup process completed!"
        """,
    ),
    "Wave Browser": UninstallerScript(
        name="Wave Browser",
        log_path=Path("C:/Temp/WavesorRemediationLog.txt"),
        powershell_code=r"""
$LogFile = "C:\Temp\WavesorRemediationLog.txt"

function Write-Log {
    param([string]$message)
    Add-Content -Path $LogFile -Value "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - $message"
}

function Delete-FileWithLog {
    param(
        [string]$path,
        [switch]$force
    )

    if (Test-Path -Path $path) {
        try {
            Remove-Item -Path $path -Force:$force -ErrorAction Stop
            Write-Log "Deleted: $path"
            Write-Output "Deleted: $path"
        }
        catch {
            $errorMsg = $_.Exception.Message
            $errorDetails = $_.Exception.ToString()
            Write-Log "Error deleting directory: $path"
            Write-Log "Error message: $errorMsg"
            Write-Log "Error details: $errorDetails"
            Write-Output "Error deleting directory: $path"
            Write-Output "Error message: $errorMsg"
            Write-Output "Error details: $errorDetails"
            Write-Log "Deletion unsuccessful: $path"
            Write-Output "Deletion unsuccessful: $path"
        }
    }
    else {
        Write-Log "File does not exist: $path"
        Write-Output "File does not exist: $path"
    }
}

function Delete-FolderWithLog {
    param(
        [string]$path,
        [switch]$force
    )

    if (Test-Path -Path $path) {
        try {
            Remove-Item -Path $path -Force:$force -Recurse -ErrorAction Stop
            Write-Log "Deleted Folder: $path"
            Write-Output "Deleted Folder: $path"
        }
        catch {
            Write-Log "Folder deletion unsuccessful: $path"
            Write-Output "Folder deletion unsuccessful: $path"
        }
    }
    else {
        Write-Log "Folder does not exist: $path"
        Write-Output "Folder does not exist: $path"
    }
}

Get-Process wavebrowser -ErrorAction SilentlyContinue | Stop-Process -Force
Get-Process SWUpdater -ErrorAction SilentlyContinue | Stop-Process -Force
Start-Sleep -Seconds 2

$userList = Get-Item C:\Users\* | Select-Object -ExpandProperty Name

foreach ($user in $userList) {
    if ($user -notlike "*Public*") {
        $filePaths = @(
            "C:\users\$user\downloads\Wave Browser*.exe",
            "C:\users\$user\appdata\roaming\microsoft\windows\start menu\programs\WaveBrowser.lnk",
            "C:\USERS\$user\APPDATA\ROAMING\MICROSOFT\INTERNET EXPLORER\QUICK LAUNCH\WAVEBROWSER.LNK",
            "C:\USERS\$user\DESKTOP\WAVEBROWSER.LNK"
        )

        $folderPaths = @(
            "C:\users\$user\Wavesor Software",
            "C:\users\$user\WebNavigatorBrowser",
            "C:\users\$user\appdata\local\WaveBrowser",
            "C:\users\$user\appdata\local\Temp\Wave",
            "C:\users\$user\appdata\local\WebNavigatorBrowser"
        )
        

        foreach ($filePath in $filePaths) {
            Delete-FileWithLog -path $filePath -Force
        }


        foreach ($folderPath in $folderPaths) {
            Delete-FolderWithLog -path $folderPath -Force
        }

        $taskPattern = "Wavesor|SWUpdaterCore|WaveBrowser"
        $tasks = Get-ScheduledTask | Where-Object {$_.TaskName -match $taskPattern}

        if ($tasks) {
            foreach ($task in $tasks) {
                Write-Log -Message "Found and removing: $($task.TaskName)"
                Write-Host "Found and removing: $($task.TaskName)"
                $task | Unregister-ScheduledTask -Confirm:$false
            }
        } else {
            Write-Log -Message "No tasks found matching '$taskPattern'"
            Write-Host "No tasks found matching '$taskPattern'"
        }
    }
}
Write-Log "Script execution completed. Log file written to $LogFile"
Write-Host 'Script execution completed. Log file written to $LogFile'
        """,
    ),
    "Shift Browser": UninstallerScript(
        name="Shift Browser",
        log_path=Path("C:/ShiftBrowser_Removal_Log.txt"),
        powershell_code=r"""
$LogFile = "C:\ShiftBrowser_Removal_Log.txt"
$SomethingFound = $false

function Write-Log {
    param ($Message)
    $entry = "$(Get-Date): $Message"
    Add-Content -Path $LogFile -Value $entry
    Write-Output $entry
}

Write-Log "Starting Shift Browser cleanup process..."

$ShiftPaths = @(
    "C:\Program Files (x86)\Shift",
    "C:\Program Files\Shift"
)

Write-Log "Extracting SHA1 hashes before uninstall and cleanup..."
foreach ($ShiftPath in $ShiftPaths) {
    if (Test-Path $ShiftPath) {
        $SomethingFound = $true
        Write-Log "Scanning executables in: $ShiftPath"
        $Executables = Get-ChildItem -Path $ShiftPath -Filter "*.exe" -File
        foreach ($Exe in $Executables) {
            $Hash = Get-FileHash -Path $Exe.FullName -Algorithm SHA1
            Write-Log "File: $($Exe.Name) | SHA1 Hash: $($Hash.Hash)"
        }
    } else {
        Write-Log "Shift folder not found at: $ShiftPath"
    }
}

$ShiftProcesses = @("shift", "ShiftUpdater")
foreach ($Process in $ShiftProcesses) {
    $RunningProcess = Get-Process -Name $Process -ErrorAction SilentlyContinue
    if ($RunningProcess) {
        $SomethingFound = $true
        Write-Log "Terminating process: $Process"
        Stop-Process -Name $Process -Force -ErrorAction SilentlyContinue
    }
}

Start-Sleep -Seconds 5

foreach ($ShiftPath in $ShiftPaths) {
    if (Test-Path $ShiftPath) {
        $SomethingFound = $true
        Write-Log "Attempting to remove Shift installation folder: $ShiftPath"
        Remove-Item -Path $ShiftPath -Recurse -Force -ErrorAction SilentlyContinue
        if (Test-Path $ShiftPath) {
            Write-Log "FAILED: Shift folder still exists at $ShiftPath"
        } else {
            Write-Log "SUCCESS: Shift folder successfully removed from $ShiftPath"
        }
    } else {
        Write-Log "No Shift folder found at $ShiftPath"
    }
}

$UserProfiles = Get-ChildItem -Path "C:\Users" | Select-Object -ExpandProperty Name
foreach ($User in $UserProfiles) {
    $ShiftPaths = @(
        "C:\Users\$User\AppData\Local\ShiftData",
        "C:\Users\$User\AppData\Local\Programs\Shift",
        "C:\Users\$User\AppData\Local\Shift",
        "C:\Users\$User\AppData\Roaming\Shift",
        "C:\Users\$User\Shift"
    )
    foreach ($ShiftPath in $ShiftPaths) {
        if (Test-Path $ShiftPath) {
            $SomethingFound = $true
            Write-Log "Attempting to remove Shift folder for user: $User at $ShiftPath"
            Remove-Item -Path $ShiftPath -Recurse -Force -ErrorAction SilentlyContinue
            if (Test-Path $ShiftPath) {
                Write-Log "FAILED: Shift folder still exists for user: $User at $ShiftPath"
            } else {
                Write-Log "SUCCESS: Shift folder successfully removed for user: $User at $ShiftPath"
            }
        } else {
            Write-Log "No Shift folder found for user: $User at $ShiftPath"
        }
    }
}

if ($SomethingFound) {
    Write-Output "FOUND_COMPONENTS"
} else {
    Write-Output "NO_COMPONENTS_FOUND"
}

Write-Log "Shift Browser cleanup process completed!"
        """,
    ),
    "OneStart OneLaunch": UninstallerScript(
        name="OneStart OneLaunch",
        log_path=Path("C:/Temp/OneStart_Removal_Log.txt"),
        powershell_code=r"""# OneStart/OneLaunch Complete Removal Script - Fixed
# Run as Administrator

Write-Host "OneStart/OneLaunch Complete Removal Script" -ForegroundColor Cyan
Write-Host "==========================================" -ForegroundColor Cyan

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    
    $LogFile = "C:\OneStart_OneLaunch_Removal.log"
    $LogEntry = "[$timestamp] [$Level] $Message"
    
    try {
        $LogEntry | Out-File -FilePath $LogFile -Append -Encoding UTF8 -ErrorAction SilentlyContinue
    } catch {
        # Silently continue if logging fails
    }
}

# OneStart/OneLaunch SHA1 Hash Extraction Script

function Get-ExecutableHashes {
    param(
        [string]$Path,
        [string]$Context = ""
    )
    
    if (-not (Test-Path $Path)) {
        Write-Log "Path not found: $Path"
        return
    }
    
    Write-Log "Scanning executables in: $Path"
    if ($Context) {
        Write-Host "Scanning executables in: $Path" -ForegroundColor Yellow
    }
    
    try {
        $Executables = Get-ChildItem -Path $Path -Filter "*.exe" -File -Recurse -ErrorAction SilentlyContinue
        
        if ($Executables.Count -eq 0) {
            Write-Log "No executables found in: $Path"
            return
        }
        
        foreach ($Exe in $Executables) {
            try {
                $Hash = Get-FileHash -Path $Exe.FullName -Algorithm SHA1 -ErrorAction Stop
                $LogMessage = if ($Context) { 
                    "$Context | File: $($Exe.Name) | Path: $($Exe.FullName) | SHA1: $($Hash.Hash)" 
                } else { 
                    "File: $($Exe.Name) | SHA1: $($Hash.Hash)" 
                }
                
                Write-Log $LogMessage
                Write-Host "  File: $($Exe.Name) | SHA1: $($Hash.Hash)" -ForegroundColor Green
            } catch {
                Write-Log "Failed to get hash for: $($Exe.FullName) - $_"
                Write-Host "  Failed to get hash for: $($Exe.Name)" -ForegroundColor Red
            }
        }
    } catch {
        Write-Log "Error scanning directory $Path`: $_"
        Write-Host "Error scanning directory: $Path" -ForegroundColor Red
    }
}

# Main execution
Write-Log "Starting SHA1 hash extraction for OneStart/OneLaunch..."
Write-Host "Extracting SHA1 hashes before uninstall and cleanup..." -ForegroundColor Cyan

# System-wide installation paths
$SystemPaths = @(
    "C:\Program Files (x86)\OneStart",
    "C:\Program Files\OneStart",
    "C:\Program Files (x86)\OneLaunch",
    "C:\Program Files\OneLaunch"
    "C:\Program Files\OneLaunch.ai"
    "C:\Program Files\OneStart.ai"
)

Write-Log "Scanning system-wide installations for SHA1 Enumeration..."
Write-Host "Scanning system-wide installations for SHA1 Enumeration..." -ForegroundColor Cyan
foreach ($Path in $SystemPaths) {
    Get-ExecutableHashes -Path $Path
}

# User-specific installations
Write-Log "Scanning user directories for SHA1 Enumeration..."
Write-Host "Scanning user directories for SHA1 Enumeration..." -ForegroundColor Cyan

try {
    $UserProfiles = Get-ChildItem -Path "C:\Users" -ErrorAction Stop | 
                   Where-Object { $_.PSIsContainer } | 
                   Select-Object -ExpandProperty Name
} catch {
    Write-Log "Error accessing user profiles: $_"
    Write-Host "Error accessing user profiles directory" -ForegroundColor Red
    return
}

$UserPathTemplates = @(
    "\OneStart",
    "\OneLaunch",
    "\OneStart.ai",
    "\OneLaunch.ai",
    "\AppData\Local\Programs\OneStart",
    "\AppData\Local\Programs\OneLaunch", 
    "\AppData\Local\OneStart",
    "\AppData\Local\OneLaunch",
    "\AppData\Local\OneStart.ai",
    "\AppData\Local\OneLaunch.ai",
    "\AppData\Roaming\OneStart",
    "\AppData\Roaming\OneLaunch"
    "\AppData\Roaming\OneStart.ai",
    "\AppData\Roaming\OneLaunch.ai"
)

foreach ($User in $UserProfiles) {
    foreach ($Template in $UserPathTemplates) {
        $UserPath = "C:\Users\$User$Template"
        Get-ExecutableHashes -Path $UserPath -Context "User: $User"
    }
}

Write-Log "SHA1 hash extraction completed."
Write-Host "SHA1 hash extraction completed." -ForegroundColor Green

Write-Log "Starting graceful uninstall process for OneStart/OneLaunch..."
Write-Host "Starting graceful uninstall process for OneStart/OneLaunch..."

# Registry paths for uninstall entries
$UninstallKeys = @(
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",
    "HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall",
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall",
    "HKCU:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
)

$UninstallSuccess = $false
$UninstallKeyFound = $false
$FoundApps = @()

# Function to perform silent uninstallation
function Silent-Uninstall {
    param (
        [string]$UninstallString,
        [string]$AppName
    )
    
    if ($UninstallString) {
        Write-Log "Attempting uninstall for $AppName"
        
        # Try different silent parameters based on installer type
        $SilentParams = @("--force-uninstall")
        
        foreach ($param in $SilentParams) {
            try {
                Write-Log "Trying uninstall with parameter: $param"
                
                # Check if uninstaller is an MSI
                if ($UninstallString -match "msiexec") {
                    # MSI uninstall
                    $msiArgs = "/x", "/quiet", "/norestart"
                    if ($UninstallString -match "{[A-Fa-f0-9\-]{36}}") {
                        $productCode = [regex]::Match($UninstallString, "{[A-Fa-f0-9\-]{36}}").Value
                        Write-Log "MSI uninstall for product code: $productCode"
                        Start-Process -FilePath "msiexec.exe" -ArgumentList $msiArgs + $productCode -Wait -NoNewWindow -ErrorAction Stop
                    } else {
                        Start-Process -FilePath "msiexec.exe" -ArgumentList $UninstallString.Replace("msiexec.exe", "").Trim(), "/quiet", "/norestart" -Wait -NoNewWindow -ErrorAction Stop
                    }
                } else {
                    # Regular executable uninstall
                    if ($UninstallString.Contains('"')) {
                        # Handle quoted paths
                        $exePath = ($UninstallString -split '"')[1]
                        $args = ($UninstallString -split '"')[2].Trim()
                        Start-Process -FilePath $exePath -ArgumentList "$args $param" -Wait -NoNewWindow -ErrorAction Stop
                    } else {
                        # Simple path
                        $parts = $UninstallString -split ' ', 2
                        $exePath = $parts[0]
                        $existingArgs = if ($parts.Length -gt 1) { $parts[1] } else { "" }
                        Start-Process -FilePath $exePath -ArgumentList "$existingArgs $param" -Wait -NoNewWindow -ErrorAction Stop
                    }
                }
                
                Write-Log "$AppName uninstalled successfully with parameter: $param" -Level "SUCCESS"
                Write-Host "$AppName uninstalled successfully." -ForegroundColor Green
                return $true
                
            } catch {
                Write-Log "Uninstall attempt with $param failed: $_" -Level "WARN"
                continue
            }
        }
        
        Write-Log "All silent uninstall attempts failed for $AppName" -Level "ERROR"
		Write-Host "All silent uninstall attempts failed for $AppName" -Level "ERROR"
        return $false
    } else {
        Write-Log "No uninstall string provided for $AppName" -Level "ERROR"
		Write-Host "No uninstall string provided for $AppName" -Level "ERROR"
        return $false
    }
}

# Check all registry uninstall locations for OneStart/OneLaunch
foreach ($KeyPath in $UninstallKeys) {
    try {
        Write-Log "Checking registry path: $KeyPath"
        
        $FoundKeys = Get-ChildItem -Path $KeyPath -ErrorAction SilentlyContinue | 
                    Where-Object { 
                        $displayName = $_.GetValue("DisplayName")
                        $displayName -and (
                            $displayName -match "(?i)onestart" -or 
                            $displayName -match "(?i)onelaunch" -or
                            $displayName -match "(?i)one start" -or
                            $displayName -match "(?i)one launch"
                        )
                    }
        
        foreach ($AppKey in $FoundKeys) {
            $UninstallKeyFound = $true
            $DisplayName = $AppKey.GetValue("DisplayName")
            $UninstallString = $AppKey.GetValue("UninstallString")
            $QuietUninstallString = $AppKey.GetValue("QuietUninstallString")
            
            Write-Log "Found application: $DisplayName in $KeyPath"
            Write-Host "Found application: $DisplayName" -ForegroundColor Yellow
            
            # Store found app info
            $FoundApps += @{
                Name = $DisplayName
                UninstallString = $UninstallString
                QuietUninstallString = $QuietUninstallString
                RegistryPath = $AppKey.PSPath
            }
            
            # Try quiet uninstall string first if available
            $uninstallAttempted = $false
            if ($QuietUninstallString) {
                Write-Log "Attempting quiet uninstall for: $DisplayName"
                $UninstallSuccess = Silent-Uninstall -UninstallString $QuietUninstallString -AppName $DisplayName
                $uninstallAttempted = $true
            }
            
            # If quiet uninstall failed or wasn't available, try regular uninstall string
            if (-not $UninstallSuccess -and $UninstallString) {
                Write-Log "Attempting regular uninstall for: $DisplayName"
                $UninstallSuccess = Silent-Uninstall -UninstallString $UninstallString -AppName $DisplayName
                $uninstallAttempted = $true
            }
            
            if (-not $uninstallAttempted) {
                Write-Log "No uninstall string found for: $DisplayName" -Level "WARN"
            }
            
            # Small delay between uninstalls
            Start-Sleep -Seconds 2
        }
    } catch {
        Write-Log "Error checking registry path $KeyPath`: $_" -Level "ERROR"
    }
}

# Output results
Write-Log "Graceful uninstall summary:"
Write-Host "`nGraceful Uninstall Summary:" -ForegroundColor Cyan

if ($UninstallKeyFound) {
    Write-Host "Found Applications:" -ForegroundColor Yellow
    foreach ($app in $FoundApps) {
        Write-Host "  - $($app.Name)" -ForegroundColor White
    }
    
    if ($UninstallSuccess) {
        Write-Log "At least one graceful uninstall was successful!" -Level "SUCCESS"
        Write-Host "✓ Graceful uninstall completed successfully!" -ForegroundColor Green
    } else {
        Write-Log "All graceful uninstall attempts FAILED. Proceeding with forced cleanup." -Level "ERROR"
        Write-Host "✗ Graceful uninstall FAILED. Proceeding with forced cleanup." -ForegroundColor Red
    }
} else {
    Write-Log "No OneStart/OneLaunch uninstall entries found in registry." -Level "WARN"
    Write-Host "! No OneStart/OneLaunch applications found in uninstall registry." -ForegroundColor Yellow
    Write-Host "  Proceeding directly to forced cleanup..." -ForegroundColor Yellow
}


function Stop-ProcessesSafely {
    param([string[]]$ProcessNames)
    
    foreach ($processName in $ProcessNames) {
        try {
            $processes = Get-Process -Name $processName -ErrorAction SilentlyContinue
            if ($processes) {
                Write-Log "Stopping $($processes.Count) instance(s) of $processName"
                foreach ($process in $processes) {
                    try {
                        Stop-Process -InputObject $process -Force
                        Write-Log "Successfully stopped process $processName (PID: $($process.Id))" -Level "SUCCESS"
                    } catch {
                        Write-Log "Failed to stop process $processName (PID: $($process.Id)): $_" -Level "ERROR"
                    }
                }
            }
        } catch {
            Write-Log "Error checking for process $processName`: $_" -Level "ERROR"
        }
    }
}

function Remove-FilesAndFolders {
    param([string[]]$Paths)
    
    foreach ($path in $Paths) {
        try {
            $expandedPath = [Environment]::ExpandEnvironmentVariables($path)
            
            if (Test-Path $expandedPath) {
                Write-Log "Removing: $expandedPath"
                Remove-Item -Path $expandedPath -Recurse -Force -ErrorAction Stop
                
                if (-not (Test-Path $expandedPath)) {
                    Write-Log "Successfully removed: $expandedPath" -Level "SUCCESS"
                } else {
                    Write-Log "Failed to remove: $expandedPath" -Level "ERROR"
                }
            } else {
                Write-Log "Path does not exist: $expandedPath" -Level "WARN"
            }
        } catch {
            Write-Log "Error removing $path`: $_" -Level "ERROR"
        }
    }
}

function Remove-RegistryProperty {
    param(
        [string]$Path,
        [string]$PropertyName
    )
    
    try {
        if (Test-Path $Path) {
            $property = Get-ItemProperty -Path $Path -Name $PropertyName -ErrorAction SilentlyContinue
            if ($property) {
                Remove-ItemProperty -Path $Path -Name $PropertyName -ErrorAction Stop
                Write-Log "Removed registry property: $Path\$PropertyName" -Level "SUCCESS"
            }
        }
    } catch {
        Write-Log "Failed to remove registry property $Path\$PropertyName`: $_" -Level "ERROR"
    }
}

function Remove-RegistryKey {
    param([string]$Path)
    
    try {
        if (Test-Path $Path) {
            Write-Log "Removing registry key: $Path"
            Remove-Item -Path $Path -Recurse -Force -ErrorAction Stop
            Write-Log "Successfully removed registry key: $Path" -Level "SUCCESS"
        }
    } catch {
        Write-Log "Failed to remove registry key $Path`: $_" -Level "ERROR"
    }
}

# Step 1: Stop OneStart/OneLaunch processes
Write-Log "Step 1: Stopping OneStart/OneLaunch processes..."

$valid_path = @(
    "C:\Users\*\OneStart\*",
    "C:\Users\*\OneLaunch\*",
    "C:\Users\*\OneStart.ai\*",
    "C:\Users\*\OneLaunch.ai\*",
    "C:\Users\*\AppData\Local\Programs\OneStart\*",
    "C:\Users\*\AppData\Local\Programs\OneLaunch\*",
    "C:\Users\*\AppData\Local\OneStart\*",
    "C:\Users\*\AppData\Local\OneLaunch\*",
    "C:\Users\*\AppData\Local\OneStart.ai\*",
    "C:\Users\*\AppData\Local\OneLaunch.ai\*",
    "C:\Users\*\AppData\Roaming\OneStart\*",
    "C:\Users\*\AppData\Roaming\OneLaunch\*",
    "C:\Users\*\AppData\Roaming\OneStart.ai\*",
    "C:\Users\*\AppData\Roaming\OneLaunch.ai\*"
)

$process_names = @("OneStart", "onelaunch", "onelaunchtray", "chromium")

foreach ($proc in $process_names) {
    $OL_processes = Get-Process | Where-Object { $_.Name -like $proc }
    if ($OL_processes.Count -eq 0) {
        Write-Log "No $proc processes were found."
    } else {
        Write-Log "Found $($OL_processes.Count) $proc process(es). Checking file paths..."
        foreach ($process in $OL_processes) {
            $path = $process.Path
            $pathMatches = $false
            
            # Check if process path matches any of our valid patterns
            foreach ($pattern in $valid_path) {
                if ($path -like $pattern) {
                    $pathMatches = $true
                    break
                }
            }
            
            if ($pathMatches) {
                try {
                    Stop-Process -InputObject $process -Force
                    Write-Log "$proc process file path matches and has been stopped." -Level "SUCCESS"
                } catch {
                    Write-Log "Failed to stop $proc process: $_" -Level "ERROR"
                }
            } else {
                Write-Log "$proc file path doesn't match valid path - process not stopped."
            }
        }
    }
}

# Additional process cleanup
Stop-ProcessesSafely -ProcessNames @("onelaunch", "onelaunchtray", "chromium", "OneStart")

Start-Sleep -Seconds 2

# Step 2: Remove files and folders
Write-Log "Step 2: Removing files and folders..."

$file_paths = @(
    "\OneStart",
    "\OneLaunch",
    "\OneStart.ai",
    "\OneLaunch.ai",
    "\AppData\Local\Programs\OneStart",
    "\AppData\Local\Programs\OneLaunch", 
    "\AppData\Local\OneStart",
    "\AppData\Local\OneLaunch",
    "\AppData\Local\OneStart.ai",
    "\AppData\Local\OneLaunch.ai",
    "\AppData\Roaming\OneStart",
    "\AppData\Roaming\OneLaunch"
    "\AppData\Roaming\OneStart.ai",
    "\AppData\Roaming\OneLaunch.ai"
)

foreach ($folder in (Get-ChildItem C:\Users -ErrorAction SilentlyContinue)) {
    foreach ($fpath in $file_paths) {
        $path = Join-Path -Path $folder.FullName -ChildPath $fpath
        Write-Log "Checking path: $path"
        
        if (Test-Path $path) {
            try {
                Remove-Item -Path $path -Recurse -Force -ErrorAction Stop
                if (-not (Test-Path $path)) {
                    Write-Log "$path has been deleted." -Level "SUCCESS"
                } else {
                    Write-Log "$path could not be deleted." -Level "ERROR"
                }
            } catch {
                Write-Log "Error deleting $path`: $_" -Level "ERROR"
            }
        } else {
            Write-Log "$path does not exist."
        }
    }
}

# Step 3: Remove registry entries from user hives
Write-Log "Step 3: Removing registry entries from user hives..."

$reg_paths = @("\software\OneStart.ai")

foreach ($registry_hive in (Get-ChildItem registry::hkey_users -ErrorAction SilentlyContinue)) {
    foreach ($regpath in $reg_paths) {
        $path = $registry_hive.pspath + $regpath
        if (Test-Path $path) {
            try {
                Remove-Item -Path $path -Recurse -Force -ErrorAction Stop
                Write-Log "$path has been removed." -Level "SUCCESS"
            } catch {
                Write-Log "Failed to remove $path`: $_" -Level "ERROR"
            }
        }
    }
}

# Step 4: Remove registry properties from Run keys
Write-Log "Step 4: Removing startup registry properties..."

$reg_properties = @("OneStartBar", "OneStartBarUpdate", "OneStartUpdate", "OneLaunch", "OneLaunchChromium", "OneLaunchUpdater", "OneStart")

foreach ($registry_hive in (Get-ChildItem registry::hkey_users -ErrorAction SilentlyContinue)) {
    foreach ($property in $reg_properties) {
        $path = $registry_hive.pspath + "\software\microsoft\windows\currentversion\run"
        if (Test-Path $path) {
            $reg_key = Get-Item $path -ErrorAction SilentlyContinue
            if ($reg_key) {
                $prop_value = $reg_key.GetValueNames() | Where-Object { $_ -like $property }
                if ($prop_value) {
                    try {
                        Remove-ItemProperty $path $prop_value -ErrorAction Stop
                        Write-Log "$path\$prop_value registry property value has been removed." -Level "SUCCESS"
                    } catch {
                        Write-Log "Failed to remove $path\$prop_value`: $_" -Level "ERROR"
                    }
                }
            }
        }
    }
}

# Step 5: Remove OneStart/OneLaunch uninstall registry keys
Write-Log "Step 5: Removing OneStart/OneLaunch uninstall registry keys..."

# Registry paths for uninstall entries (32-bit and 64-bit)
$UninstallKeyPaths = @(
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",
    "HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall",
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall",
    "HKCU:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
)

$UninstallKeysFound = 0
$UninstallKeysRemoved = 0

foreach ($KeyPath in $UninstallKeyPaths) {
    try {
        Write-Log "Checking uninstall registry path: $KeyPath"
        
        if (Test-Path $KeyPath) {
            $FoundKeys = Get-ChildItem -Path $KeyPath -ErrorAction SilentlyContinue | 
                        Where-Object { 
                            $displayName = $_.GetValue("DisplayName")
                            $displayName -and (
                                $displayName -match "(?i)onestart" -or 
                                $displayName -match "(?i)onelaunch" -or
                                $displayName -match "(?i)one start" -or
                                $displayName -match "(?i)one launch"
                            )
                        }
            
            foreach ($AppKey in $FoundKeys) {
                $UninstallKeysFound++
                $DisplayName = $AppKey.GetValue("DisplayName")
                $UninstallString = $AppKey.GetValue("UninstallString")
                
                Write-Log "Found uninstall key: $DisplayName at $($AppKey.PSPath)"
                
                try {
                    Remove-Item -Path $AppKey.PSPath -Recurse -Force -ErrorAction Stop
                    $UninstallKeysRemoved++
                    Write-Log "Successfully removed uninstall key: $DisplayName" -Level "SUCCESS"
                } catch {
                    Write-Log "Failed to remove uninstall key $DisplayName`: $_" -Level "ERROR"
                }
            }
        } else {
            Write-Log "Registry path not found: $KeyPath"
        }
    } catch {
        Write-Log "Error checking registry path $KeyPath`: $_" -Level "ERROR"
    }
}

# Also check user registry hives (HKU)
Write-Log "Checking user registry hives for OneStart/OneLaunch uninstall keys..."

try {
    $UserHives = Get-ChildItem -Path "Registry::HKEY_USERS" -ErrorAction SilentlyContinue | 
                Where-Object { $_.Name -match "S-1-5-21-\d+-\d+-\d+-\d+$" }
    
    foreach ($UserHive in $UserHives) {
        $UserUninstallPath = "$($UserHive.PSPath)\Software\Microsoft\Windows\CurrentVersion\Uninstall"
        
        if (Test-Path $UserUninstallPath) {
            $UserFoundKeys = Get-ChildItem -Path $UserUninstallPath -ErrorAction SilentlyContinue | 
                            Where-Object { 
                                $displayName = $_.GetValue("DisplayName")
                                $displayName -and (
                                    $displayName -match "(?i)onestart" -or 
                                    $displayName -match "(?i)onelaunch" -or
                                    $displayName -match "(?i)one start" -or
                                    $displayName -match "(?i)one launch"
                                )
                            }
            
            foreach ($UserAppKey in $UserFoundKeys) {
                $UninstallKeysFound++
                $DisplayName = $UserAppKey.GetValue("DisplayName")
                
                Write-Log "Found user uninstall key: $DisplayName at $($UserAppKey.PSPath)"
                
                try {
                    Remove-Item -Path $UserAppKey.PSPath -Recurse -Force -ErrorAction Stop
                    $UninstallKeysRemoved++
                    Write-Log "Successfully removed user uninstall key: $DisplayName" -Level "SUCCESS"
                } catch {
                    Write-Log "Failed to remove user uninstall key $DisplayName`: $_" -Level "ERROR"
                }
            }
        }
    }
} catch {
    Write-Log "Error checking user registry hives: $_" -Level "ERROR"
}

Write-Log "Uninstall registry cleanup completed. Found: $UninstallKeysFound, Removed: $UninstallKeysRemoved"

# Step 6: Remove scheduled tasks
Write-Log "Step 6: Removing scheduled tasks..."

# Remove OneStart/OneLaunch/ChromiumLaunch scheduled tasks
Write-Log "Scanning for OneStart/OneLaunch/ChromiumLaunch scheduled tasks..."
Write-Host "Scanning for OneStart/OneLaunch/ChromiumLaunch scheduled tasks..." -ForegroundColor Cyan

try {
    # Get all scheduled tasks and filter for ones containing onestart, onelaunch, or chromiumlaunch
    $TasksToRemove = Get-ScheduledTask | Where-Object { 
        $_.TaskName -match "(?i)onestart" -or 
        $_.TaskName -match "(?i)onelaunch" -or
        $_.TaskName -match "(?i)chromiumlaunch"
    }
    
    if ($TasksToRemove.Count -eq 0) {
        Write-Log "No OneStart/OneLaunch/ChromiumLaunch scheduled tasks found."
        Write-Host "No OneStart/OneLaunch/ChromiumLaunch scheduled tasks found." -ForegroundColor Green
    } else {
        Write-Log "Found $($TasksToRemove.Count) OneStart/OneLaunch/ChromiumLaunch scheduled task(s):"
        Write-Host "Found $($TasksToRemove.Count) OneStart/OneLaunch/ChromiumLaunch scheduled task(s):" -ForegroundColor Yellow
        
        foreach ($Task in $TasksToRemove) {
            Write-Log "  - Task Name: $($Task.TaskName) | Path: $($Task.TaskPath) | State: $($Task.State)"
            Write-Host "  - $($Task.TaskName)" -ForegroundColor White
            
            try {
                Unregister-ScheduledTask -TaskName $Task.TaskName -Confirm:$false -ErrorAction Stop
                Write-Log "Successfully removed scheduled task: $($Task.TaskName)" -Level "SUCCESS"
                Write-Host "    ✓ Removed successfully" -ForegroundColor Green
            } catch {
                Write-Log "Failed to remove scheduled task $($Task.TaskName): $_" -Level "ERROR"
                Write-Host "    ✗ Failed to remove: $_" -ForegroundColor Red
            }
        }
    }
} catch {
    Write-Log "Error scanning for scheduled tasks: $_" -Level "ERROR"
    Write-Host "Error scanning for scheduled tasks: $_" -ForegroundColor Red
}

Write-Log "Scheduled task cleanup completed."

# Step 7: Remove additional files per user
Write-Log "Step 7: Removing additional files per user..."

$user_list = Get-Item C:\users\* -ErrorAction SilentlyContinue | Select-Object Name -ExpandProperty Name

foreach ($user in $user_list) {
    Write-Log "Processing user: $user"
    
    # Remove OneLaunch installers
    try {
        $installers = @(Get-ChildItem C:\users\$user -Recurse -Filter "OneLaunch*.exe" -ErrorAction SilentlyContinue | ForEach-Object { $_.FullName })
        foreach ($install in $installers) {
            if (Test-Path -Path $install) {
                Remove-Item $install -ErrorAction SilentlyContinue
                if (-not (Test-Path -Path $install)) {
                    Write-Log "Removed installer: $install" -Level "SUCCESS"
                } else {
                    Write-Log "Failed to remove: $install" -Level "ERROR"
                }
            }
        }
    } catch {
        Write-Log "Error searching for installers for user $user`: $_" -Level "ERROR"
    }
    
    # Remove shortcuts
    $shortcuts = @(
        "C:\Users\$user\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\OneLaunch.lnk",
        "C:\Users\$user\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\OneLaunchChromium.lnk",
        "C:\Users\$user\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\OneLaunchUpdater.lnk",
        "C:\Users\$user\desktop\OneLaunch.lnk"
    )
    
    foreach ($shortcut in $shortcuts) {
        if (Test-Path -Path $shortcut) {
            try {
                Remove-Item $shortcut -ErrorAction Stop
                Write-Log "Removed shortcut: $shortcut" -Level "SUCCESS"
            } catch {
                Write-Log "Failed to remove OneLaunch shortcut: $shortcut - $_" -Level "ERROR"
            }
        }
    }
    
    # Remove local paths (Fixed variable name)
    $localPaths = @(
        "C:\Users\$user\appdata\local\OneLaunch",
        "C:\Users\$user\appdata\Roaming\Microsoft\Windows\Start Menu\Programs\OneLaunch"
        "C:\Users\$user\onestart.ai"
        "C:\Users\$user\onelaunch.ai"
        "C:\Users\$user\onestart"
        "C:\Users\$user\onelaunch"
    )
    
    foreach ($localPath in $localPaths) {
        if (Test-Path -Path $localPath) {
            try {
                Remove-Item $localPath -Force -Recurse -ErrorAction Stop
                Write-Log "Removed local path: $localPath" -Level "SUCCESS"
            } catch {
                Write-Log "Failed to remove OneLaunch path: $localPath - $_" -Level "ERROR"
            }
        }
    }
}

# Step 8: Remove user-specific registry entries
Write-Log "Step 8: Removing user-specific registry entries..."

$sid_list = Get-Item -Path "Registry::HKU\S-*" -ErrorAction SilentlyContinue | 
           Select-String -Pattern "S-\d-(?:\d+-){5,14}\d+" | 
           ForEach-Object { $_.ToString().Trim() }

foreach ($sid in $sid_list) {
    if ($sid -notlike "*_Classes*") {
        Write-Log "Processing SID: $sid"
        
        # Remove uninstall key
        $uninstallKey = "Registry::$sid\Software\Microsoft\Windows\CurrentVersion\Uninstall\{4947c51a-26a9-4ed0-9a7b-c21e5ae0e71a}_is1"
        Remove-RegistryKey -Path $uninstallKey
        
        # Remove run keys
        $runKeys = @("OneLaunch", "OneLaunchChromium", "OneLaunchUpdater", "OneStart")
        foreach ($key in $runKeys) {
            $keypath = "Registry::$sid\Software\Microsoft\Windows\CurrentVersion\Run"
            Remove-RegistryProperty -Path $keypath -PropertyName $key
        }
        
        # Remove misc keys
        $miscKeys = @("OneLaunchHTML_.pdf", "OneLaunch")
        $miscPaths = @(
            "Registry::$sid\SOFTWARE\Microsoft\Windows\CurrentVersion\ApplicationAssociationToasts",
            "Registry::$sid\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FeatureUsage\AppBadgeUpdated",
            "Registry::$sid\SOFTWARE\RegisteredApplications"
        )
        
        foreach ($miscPath in $miscPaths) {
            foreach ($key in $miscKeys) {
                Remove-RegistryProperty -Path $miscPath -PropertyName $key
            }
        }
        
        # Remove registry paths
        $paths = @(
            "Registry::$sid\Software\OneLaunch",
            "Registry::$sid\SOFTWARE\Classes\OneLaunchHTML"
        )
        foreach ($path in $paths) {
            Remove-RegistryKey -Path $path
        }
    }
}

# Step 9: Remove task files
Write-Log "Step 9: Removing task files..."

$tasks = @("OneLaunchLaunchTask", "ChromiumLaunchTask", "OneLaunchUpdateTask")
foreach ($task in $tasks) {
    $taskPath = "C:\windows\system32\tasks\$task"
    if (Test-Path $taskPath) {
        try {
            Remove-Item $taskPath -ErrorAction Stop
            Write-Log "Removed task file: $taskPath" -Level "SUCCESS"
        } catch {
            Write-Log "Failed to remove OneLaunch task: $taskPath - $_" -Level "ERROR"
        }
    }
}

# Step 10: Remove task cache registry keys
Write-Log "Step 10: Removing task cache registry keys..."

$taskCacheKeys = @(
    "Registry::HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\TREE\OneLaunchLaunchTask",
    "Registry::HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\TREE\ChromiumLaunchTask",
    "Registry::HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\TREE\OneLaunchUpdateTask"
)
foreach ($taskCacheKey in $taskCacheKeys) {
    Remove-RegistryKey -Path $taskCacheKey
}

# Step 11: Remove trace cache registry keys
Write-Log "Step 11: Removing trace cache registry keys..."

$traceCacheKeys = @(
    "Registry::HKLM\SOFTWARE\Microsoft\Tracing\onelaunch_RASMANCS",
    "Registry::HKLM\SOFTWARE\Microsoft\Tracing\onelaunch_RASAPI32",
	"Registry::HKLM\SOFTWARE\Microsoft\Tracing\OneStart_RASAPI32",
	"Registry::HKLM\SOFTWARE\Microsoft\Tracing\OneStart_RASMANCS"

)
foreach ($traceCacheKey in $traceCacheKeys) {
    Remove-RegistryKey -Path $traceCacheKey
}

# Final cleanup - Stop any remaining processes
Write-Log "Final cleanup: Stopping any remaining processes..."
Stop-ProcessesSafely -ProcessNames @("onelaunch", "onelaunchtray", "chromium", "OneStart")

Write-Log "OneStart/OneLaunch removal process completed!" -Level "SUCCESS"
Write-Host "`nRECOMMENDATION: Please restart your computer to ensure all changes take effect." -ForegroundColor Yellow

# Summary
Write-Host "`nRemoval Summary:" -ForegroundColor Cyan
Write-Host "- Processes stopped" -ForegroundColor Green
Write-Host "- Files and folders removed" -ForegroundColor Green
Write-Host "- Registry entries cleaned" -ForegroundColor Green
Write-Host "- Startup entries removed" -ForegroundColor Green
Write-Host "- Scheduled tasks removed" -ForegroundColor Green
Write-Host "- User-specific data cleaned" -ForegroundColor Green
Write-Host "- Task cache cleared" -ForegroundColor Green
        """,
    ),       
}


class UniversalUninstaller:
    """Universal malware uninstaller that executes PowerShell scripts to remove malware.
    
    This class provides methods to execute individual or multiple malware removal scripts
    and aggregates the results with proper status reporting.
    """
    
    def __init__(self):
        """Initialize the uninstaller with a logger instance."""
        self.logger = Logger()

    def execute_powershell(self, script: UninstallerScript) -> ExecutionResult:
        """Execute a single PowerShell uninstaller script."""
        try:
            # Create temp file and execute
            with tempfile.NamedTemporaryFile(
                delete=False, suffix=".ps1", mode="w", encoding="utf-8"
            ) as temp_file:
                temp_file.write(script.powershell_code)
                temp_path = temp_file.name

            # Execute PowerShell
            result = subprocess.run(
                ["powershell.exe", "-ExecutionPolicy", "Bypass", "-File", temp_path],
                capture_output=True,
                text=True,
                timeout=120,
            )

            # Clean up temp file
            Path(temp_path).unlink(missing_ok=True)

            # Read log file generated by PowerShell script
            log_content = ""
            if script.log_path.exists():
                log_content = script.log_path.read_text(encoding="utf-8")

            return ExecutionResult(
                script_name=script.name,
                success=result.returncode == 0,
                log_content=log_content,
                error_message=result.stderr if result.returncode != 0 else None,
            )

        except Exception as e:
            return ExecutionResult(
                script_name=script.name,
                success=False,
                log_content="",
                error_message=str(e),
            )

    def run_uninstallers(self, app_names: List[str]) -> BulkUninstallerResult:
        """Run multiple uninstaller scripts and return aggregated results."""
        results = []

        for app_name in app_names:
            if app_name in UNINSTALLER_SCRIPTS:
                self.logger.info(f"Running uninstaller for: {app_name}")
                result = self.execute_powershell(UNINSTALLER_SCRIPTS[app_name])
                results.append(result)

                # Log individual result
                if result.success:
                    self.logger.result_success_message(
                        f"{app_name}: uninstalled successfully"
                    )
                else:
                    self.logger.result_failed_message(
                        f"{app_name}: uninstall failed - {result.error_message}"
                    )
            else:
                self.logger.warning(f"No uninstaller found for: {app_name}")
                results.append(
                    ExecutionResult(
                        script_name=app_name,
                        success=False,
                        log_content="",
                        error_message="No uninstaller script defined",
                    )
                )

        # Calculate overall status
        successful = sum(1 for r in results if r.success)
        total = len(results)

        if total == 0:
            overall_status = "Failed"
        elif successful == total:
            overall_status = "Success"
        elif successful > 0:
            overall_status = "Partial Success"
        else:
            overall_status = "Failed"

        return BulkUninstallerResult(
            overall_status=cast(Literal["Success", "Partial Success", "Failed"], overall_status),
            total_scripts=total,
            successful_scripts=successful,
            failed_scripts=total - successful,
            results=results,
        )

    def run_all_uninstallers(self) -> BulkUninstallerResult:
        """Run ALL available uninstaller scripts."""
        all_app_names = list(UNINSTALLER_SCRIPTS.keys())
        self.logger.info(
            f"Running all available uninstallers: {', '.join(all_app_names)}"
        )
        return self.run_uninstallers(all_app_names)


def main():
    """Main entry point compatible with cw_rpa framework."""
    try:
        input_provider = Input()
        uninstaller = UniversalUninstaller()

        # Get app names from input - supports both list of apps and "run all"
        app_names_input = input_provider.get_value(
            "UninstallAppNames_1750856640900"
        )

        # Parse input
        if isinstance(app_names_input, str):
            if app_names_input.lower() in ["all", "run_all", "run all"]:
                # Run all available uninstallers
                result = uninstaller.run_all_uninstallers()
            else:
                # Try to evaluate as a list
                try:
                    app_names = eval(app_names_input)
                    if not isinstance(app_names, list):
                        raise ValueError(
                            "Expected a list of app names or 'all'"
                        )
                    result = uninstaller.run_uninstallers(app_names)
                except Exception:
                    # Single app name as string
                    result = uninstaller.run_uninstallers([app_names_input])
        elif isinstance(app_names_input, list):
            result = uninstaller.run_uninstallers(app_names_input)
        else:
            # run with all if input is not a recognized format
            result = uninstaller.run_all_uninstallers()

        # Log final results in the format expected by the framework
        uninstaller.logger.result_data(
            {
                "overall_status": result.overall_status,
                "summary": {
                    "total": result.total_scripts,
                    "successful": result.successful_scripts,
                    "failed": result.failed_scripts,
                },
                "details": [r.model_dump() for r in result.results],
            }
        )

    except Exception as e:
        logger = Logger()
        logger.error(f"BulkUninstaller failed: {str(e)}")
        logger.result_failed_message(
            f"BulkUninstaller: failed to execute - {str(e)}"
        )


if __name__ == "__main__":
    main()
